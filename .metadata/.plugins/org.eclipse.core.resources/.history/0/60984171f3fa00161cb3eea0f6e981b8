/*
 * Check Permutation: Given two strings, write a method to decide 
 * if one is a permutation of the other.
 * Assuming that the algorithm is asked for case sensitive strings ( A != a)
 */
public class checkPermutation {

	public static boolean isSimilar(String first, String second){
		if(first.length() != second.length()){
			return false;
		}
		else{
			int[] intArray = new int[28]; //assuming that the string contains only ascii characters
			/*
			 * 128 can be considered only when the strings are case sensitive 
			 * as 'A' and 'a' have different ascii codes
			 */
			char[] firstCharArray = first.toCharArray(); //create a character array 
			for(char eachChar: firstCharArray){
				intArray[eachChar]++; //count the number of times each character appears
			}

			for(int i=0; i<second.length(); i++){
				int charAscii = (int) second.charAt(i);
				intArray[charAscii]--; //Subtract the number of times character appears
				
				if(intArray[charAscii] < 0){ 
					/*
					 * if the strings were the same then all the characters
					 * should be subtracted and made zero.
					 */
					return false;
				}
			}
			return true;
		}

	}
	public static String sortingStr(String givenStr){
		char[] charArray = givenStr.toCharArray();
		java.util.Arrays.sort(charArray);
		String result = new String(charArray);
		//System.out.println(result);
		return result;
	}

	public static void main(String[] args) {
		String firstStr = "abcdabcdabcd";
		String secondStr = "dcabdcabdcab";
		String firstSortedStr = sortingStr(firstStr);
		String secondSortedStr = sortingStr(secondStr);
		
		boolean simpleAlgoResult = firstSortedStr.equals(secondSortedStr);
		System.out.println("The result of a quick and simple algorithm with complexity O(nlogn) is: " + simpleAlgoResult);

		boolean result = isSimilar(firstStr, secondStr);
		System.out.println("The result of a better complexity of O(n) is: "+ result);

	}

}
