package binaryTree;

import java.io.*;
import java.net.*;
import java.util.*;


class treeNode{
	public treeNode leftchild;
	public treeNode rightchild;
	public int data;

	public treeNode(int x){
		this.data = x;
		this.leftchild = null;
		this.rightchild = null;
	}

	public static treeNode insert(int x, treeNode head){

		treeNode newNode = new treeNode(x);

		if (head==null){
			head = newNode;
			return head;
		}
		else if(x < head.data){
			head.leftchild = insert(x, head.leftchild);
		}
		else{
			head.rightchild = insert(x, head.rightchild);
		}
		return head;
	}

	public static void searchTree(treeNode root, int x){

		if (root == null){
			return;
		}
		else{
			if(root.data == x){
				System.out.println("Element found");
				return;
			}
			else if(x > root.data){
				searchTree(root.rightchild, x);
			}
			else{
				searchTree(root.leftchild, x);
			}
		}
	}

	public static void preOrderRec(treeNode root) {
		if (root != null) {
			System.out.print(root.data + " ");
			preOrderRec(root.leftchild);
			preOrderRec(root.rightchild);
		}
	}

	public static void postOrderRec(treeNode root) {
		if (root != null) {
			postOrderRec(root.leftchild);
			postOrderRec(root.rightchild);
			System.out.print(root.data + " ");
		}
	}

	public static void inOrderRec(treeNode root) {
		if (root != null) {
			inOrderRec(root.leftchild);
			System.out.print(root.data + " ");
			inOrderRec(root.rightchild);
		}
	}

	public static void preOrderIter(treeNode root){
		Stack<treeNode> stack = new Stack<treeNode>();
		if(root==null)
			return;

		stack.push(root);
		while(!stack.empty()){
			treeNode tempRoot = stack.pop();
			System.out.print(tempRoot.data + " ");

			if (tempRoot.rightchild!=null){
				stack.push(tempRoot.rightchild);
			}
			if(tempRoot.leftchild!=null){
				stack.push(tempRoot.leftchild);
			}
		}
	}

	public static void postOrderIter1stack(treeNode root) {
		if(root==null)
			return;

		Stack<treeNode> stack = new Stack<treeNode>();
		treeNode current = root;
		while(true){
			if(current!=null){
				if(current.rightchild!=null){
					stack.push(current.rightchild);
				}
				stack.push(current);
				current = current.leftchild;
				continue;
			}

			if(stack.isEmpty())
				return;

			current = stack.pop();

			if(current.rightchild!=null && !stack.isEmpty() && current.rightchild == stack.peek() ){
				stack.pop();
				stack.push(current);
				current = current.rightchild;

			}
			else{
				System.out.print(current.data + " ");
				current = null;
			}
		}
	}

	public static void postOrderIter2stack(treeNode root) {
		Stack<treeNode> s1 = new Stack<treeNode>();
		Stack<treeNode> s2 = new Stack<treeNode>();
		treeNode current = root;
		s1.push(current);
		while(!s1.isEmpty()){
			current = s1.pop();
			s2.push(current);
			if(current.leftchild!= null){
				s1.push(current.leftchild);
			}
			if(current.rightchild!=null){
				s1.push(current.rightchild);
			}
		}
		while(!s2.isEmpty()){
			System.out.print(s2.pop().data + " ");
		}
	}
	
	public static void inOrderIter(treeNode root) {
		if(root == null)
			return;
		
		Stack<treeNode> stack = new Stack<treeNode>();
		treeNode current = root;
		while(!stack.isEmpty() || current!=null){
			if(current!=null){
				stack.push(current);
				current = current.leftchild;
			}
			else{
				treeNode temp = stack.pop();
				System.out.print(temp.data + " ");
				current = temp.rightchild;
			}
		}
	}

	public static boolean isBST(treeNode root){
        return isBST(root, Integer.MIN_VALUE, Integer.MAX_VALUE);
    }
    
    private static boolean isBST(treeNode root, int min, int max){
        if(root == null){
            return true;
        }
        if(root.data <= min || root.data > max){
            return false;
        }
        return isBST(root.leftchild, min, root.data) && isBST(root.rightchild, root.data, max);
    }
    
    
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		treeNode head = null;
		head = insert(10, head);
		head = insert(20, head);
		head = insert(8, head);
		head = insert(6, head);
		head = insert(7, head);
		head = insert(30, head);
		head = insert(18, head);
		head = insert(5,head);

		searchTree(head, 6);

		System.out.println("Pre order Recursion");
		preOrderRec(head);
		System.out.println("\nPost order Recursion");
		postOrderRec(head);
		System.out.println("\nIn order Recursion");
		inOrderRec(head);
		System.out.println("\nPre order Iteration");
		preOrderIter(head);
		System.out.println("\nPost order Iteration using 1 stack");
		postOrderIter1stack(head);
		System.out.println("\nPost order Iteration using 2 stacks");
		postOrderIter2stack(head);
		System.out.println("\nIn order Iteration");
		inOrderIter(head);
		
		boolean isBST = isBST(head);
		if(isBST == true){
		System.out.println("\nThe given tree is a binary serach tree");
		}
		else{
			System.out.println("\nThe given tree is not a binary serach tree");
		}
	}
}



