package binaryTree;

import java.io.*;
import java.net.*;
import java.util.*;


class treeNode{
	public treeNode leftchild;
	public treeNode rightchild;
	public int data;

	public treeNode(int x){
		this.data = x;
		this.leftchild = null;
		this.rightchild = null;
	}

	public static treeNode insert(int x, treeNode head){

		treeNode newNode = new treeNode(x);

		if (head==null){
			head = newNode;
			return head;
		}
		else if(x < head.data){
			head.leftchild = insert(x, head.leftchild);
		}
		else{
			head.rightchild = insert(x, head.rightchild);
		}
		return head;
	}

	public static void searchTree(treeNode root, int x){

		if (root == null){
			return;
		}
		else{
			if(root.data == x){
				System.out.println("Element found");
				return;
			}
			else if(x > root.data){
				searchTree(root.rightchild, x);
			}
			else{
				searchTree(root.leftchild, x);
			}
		}
	}

	public static void preOrderRec(treeNode root) {
		if (root != null) {
			System.out.print(root.data + " ");
			preOrderRec(root.leftchild);
			preOrderRec(root.rightchild);
		}
	}

	public static void postOrderRec(treeNode root) {
		if (root != null) {
			postOrderRec(root.leftchild);
			postOrderRec(root.rightchild);
			System.out.print(root.data + " ");
		}
	}

	public static void inOrderRec(treeNode root) {
		if (root != null) {
			inOrderRec(root.leftchild);
			System.out.print(root.data + " ");
			inOrderRec(root.rightchild);
		}
	}

	public static void preOrderIter(treeNode root){
		Stack<treeNode> stack = new Stack<treeNode>();
		if(root==null)
			return;

		stack.push(root);
		while(!stack.empty()){
			treeNode rootPrint = stack.pop();
			System.out.println(rootPrint.data);
			
			if (root.rightchild!=null){
				stack.push(rootPrint.rightchild);
			}
			if(root.leftchild!=null){
				stack.push(rootPrint.leftchild);
			}
		}
	}



	public static void main(String[] args) {
		// TODO Auto-generated method stub
		treeNode head = null;
		head = insert(10, head);
		head = insert(20, head);
		head = insert(8, head);
		head = insert(6, head);
		head = insert(7, head);

		searchTree(head, 6);

		System.out.println("Pre order Recursion");
		preOrderRec(head);
		System.out.println("\nPost order Recursion");
		postOrderRec(head);
		System.out.println("\nIn order Recursion");
		inOrderRec(head);
		System.out.println("\nPre order Iteration");
		preOrderIter(head);
	}
}



